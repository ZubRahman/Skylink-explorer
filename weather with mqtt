import requests
import folium
import time
import paho.mqtt.client as paho

# MQTT callbacks
def on_connect(client, userdata, flags, rc, properties=None):
    print("CONNACK received with code %s." % rc)

def on_publish(client, userdata, mid, properties=None):
    print("mid: " + str(mid))

def on_subscribe(client, userdata, mid, granted_qos, properties=None):
    print("Subscribed: " + str(mid) + " " + str(granted_qos))

def on_message(client, userdata, msg):
    print(msg.topic + " " + str(msg.qos) + " " + str(msg.payload))

client = paho.Client(client_id="", userdata=None, protocol=paho.MQTTv5)
client.on_connect = on_connect
client.on_publish = on_publish
client.on_subscribe = on_subscribe
client.on_message = on_message

# Enable TLS for secure connection
client.tls_set(tls_version=paho.ssl.PROTOCOL_TLS)
# Set username and password
client.username_pw_set("user1", "User1234")
# Connect to HiveMQ Cloud on port 8883 (default for MQTT)
client.connect("3304243d6499474ea584cbe3d25c4102.s2.eu.hivemq.cloud", 8883)

def get_weather(api_key, country):
    base_url = 'http://api.openweathermap.org/data/2.5/weather'
    params = {
        'q': country, # sets the country of destination
        'appid': api_key, # the api key that is used
        'units': 'metric' # the units the temp is displayed in
    }
    response = requests.get(base_url, params=params)

    if response.status_code == 200:
        weather_data = response.json()
        city_name = weather_data['name']
        temperature = weather_data['main']['temp']
        weather_description = weather_data['weather'][0]['description']

        # Construct weather information string
        weather_info = f"Weather in {city_name}: Temperature: {temperature}Â°C, Description: {weather_description}"

        # Publish weather information to MQTT topic
        client.publish("weather_info", weather_info)

        print("Weather information published to MQTT topic 'weather_info'")
    else:
        print(f"Failed to retrieve weather data. Status Code: {response.status_code}")

def planeInfo():
    # Replace 'YOUR_API_KEY' with your actual Aviation Stack API key
    api_key = '6028486d33c86158f4d7913afe8931d0'
    base_url = 'http://api.aviationstack.com/v1/flights'
    # Replace 'YOUR_FLIGHT_IATA_CODE' with the desired flight's IATA code
    flight_iata_code = 'EK8'

    # Make a request to get flight data
    params = {'access_key': api_key, 'flight_iata': flight_iata_code}
    response = requests.get(base_url, params=params)

    # Check if the request was successful
    if response.status_code == 200:
        flight_data = response.json()['data'][0]

        # Get relevant flight information
        flight_info = f"Flight: {flight_data['flight']['iata']}, Status: {flight_data['flight_status']}, Altitude: {flight_data['flight']['altitude']}"

        # Publish flight information to MQTT topic
        client.publish("flight_info", flight_info)

        print("Flight information published to MQTT topic 'flight_info'")
    else:
        print(f"Failed to retrieve flight data. Status Code: {response.status_code}")
        print(response.text)

    # Retrieve weather information and publish it to MQTT topic
    get_weather(api_key, "London")  # Example: Get weather information for London

# Call the planeInfo function to retrieve flight and weather information and publish them to MQTT topics
planeInfo()

# Start MQTT loop
client.loop_start()
time.sleep(5)  # Wait for 5 seconds to ensure publishing and subscribing
client.loop_stop()  # Stop MQTT loop
